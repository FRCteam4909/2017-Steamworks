// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4909.STEAMWORKS;

import org.usfirst.frc4909.STEAMWORKS.PID.PIDController;

import com.kauailabs.navx.frc.AHRS;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.SerialPort;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drivetrainLeftFrontDriveMotorController;
    public static SpeedController drivetrainLeftBackDriveMotorController;
    public static SpeedController drivetrainRightBackDriveMotorController;
    public static SpeedController drivetrainRightFrontDriveMotorController;
    public static RobotDrive drivetrainRobotDrive;
    public static Encoder drivetrainLeftEncoder;
    public static Encoder drivetrainRightEncoder;
    public static SpeedController climberClimberMotorController;
    public static Encoder climberClimberEncoder;
    public static AnalogPotentiometer intakePivotPot;
    public static SpeedController intakeIntakeMotor;
    public static SpeedController feederFeederMotor;
    public static Encoder shooterShooterEncoder;
    public static SpeedController shooterShooterMotorController;
    
    public static SpeedController intakePivotMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController loaderMotor;
    public static AnalogPotentiometer loaderPivotPot;
    public static DigitalInput climberSwitch;
    
    public static PIDController shooterPID;
    public static double shooterP = 0.00015;
    public static double shooterI = 0.00000;
    public static double shooterD = 0.00000;
    public static double shooterF = 0.00050;

    public static AHRS navx;
	public static PowerDistributionPanel PDP;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainLeftFrontDriveMotorController = new Talon(0);
        LiveWindow.addActuator("Drivetrain", "LeftFrontDriveMotorController", (Talon) drivetrainLeftFrontDriveMotorController);
        
        drivetrainLeftBackDriveMotorController = new Talon(1);
        LiveWindow.addActuator("Drivetrain", "LeftBackDriveMotorController", (Talon) drivetrainLeftBackDriveMotorController);
        
        drivetrainRightBackDriveMotorController = new Talon(3);
        LiveWindow.addActuator("Drivetrain", "RightBackDriveMotorController", (Talon) drivetrainRightBackDriveMotorController);
        
        drivetrainRightFrontDriveMotorController = new Talon(2);
        LiveWindow.addActuator("Drivetrain", "RightFrontDriveMotorController", (Talon) drivetrainRightFrontDriveMotorController);
        
        drivetrainRobotDrive = new RobotDrive(drivetrainLeftFrontDriveMotorController, drivetrainLeftBackDriveMotorController,
              drivetrainRightFrontDriveMotorController, drivetrainRightBackDriveMotorController);
        
        drivetrainRobotDrive.setSafetyEnabled(true);
        drivetrainRobotDrive.setExpiration(0.1);
        drivetrainRobotDrive.setSensitivity(0.5);
        drivetrainRobotDrive.setMaxOutput(1.0);
        drivetrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        drivetrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        drivetrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        drivetrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        drivetrainLeftEncoder = new Encoder(0, 1, true, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "LeftEncoder", drivetrainLeftEncoder);
        drivetrainLeftEncoder.setDistancePerPulse(1.0);
        drivetrainLeftEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
        drivetrainRightEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "RightEncoder", drivetrainRightEncoder);
        drivetrainRightEncoder.setDistancePerPulse(1.0);
        drivetrainRightEncoder.setPIDSourceType(PIDSourceType.kRate);
        climberClimberMotorController = new Talon(5);
        LiveWindow.addActuator("Climber", "ClimberMotorController", (Talon) climberClimberMotorController);
        
        climberClimberEncoder = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("Climber", "ClimberEncoder", climberClimberEncoder);
        climberClimberEncoder.setDistancePerPulse(1.0);
        climberClimberEncoder.setPIDSourceType(PIDSourceType.kRate);
        intakePivotPot = new AnalogPotentiometer(0, 1.0, 0.0);
        LiveWindow.addSensor("Intake", "PivotPot", intakePivotPot);
        
        intakeIntakeMotor = new Talon(7);
        LiveWindow.addActuator("Intake", "IntakeMotor", (Talon) intakeIntakeMotor);
        
        feederFeederMotor = new Talon(6);
        LiveWindow.addActuator("Feeder", "FeederMotor", (Talon) feederFeederMotor);
        
        shooterShooterEncoder = new Encoder(6, 7, true, EncodingType.k4X);
        LiveWindow.addSensor("Shooter", "ShooterEncoder", shooterShooterEncoder);
        shooterShooterEncoder.setDistancePerPulse(1.0);
        shooterShooterEncoder.setPIDSourceType(PIDSourceType.kRate);
        shooterShooterMotorController = new Talon(4);
        LiveWindow.addActuator("Shooter", "ShooterMotorController", (Talon) shooterShooterMotorController);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        shooterShooterEncoder.setDistancePerPulse(1.0/(2048.0/48.0));
        shooterShooterMotorController.setInverted(true);
        navx = new AHRS(SerialPort.Port.kMXP);
    	SmartDashboard.putNumber("P", shooterP);
    	SmartDashboard.putNumber("I", shooterI);
    	SmartDashboard.putNumber("D", shooterD);
    	SmartDashboard.putNumber("F", shooterF);

    	PDP = new PowerDistributionPanel();
    
    	shooterPID = new PIDController(shooterP, shooterI, shooterD,1);
   
    
    	loaderMotor = new Talon(9);
    	 	LiveWindow.addActuator("Loader", "LoaderMotor", (Talon) loaderMotor);
    	loaderPivotPot = new AnalogPotentiometer(1, 3600, 0.0);
       LiveWindow.addSensor("Loader", "PivotPot", loaderPivotPot);
       
       intakePivotMotor= new Talon(8);
       LiveWindow.addActuator("Intake", "IntakePivotMotorController", (Talon) intakePivotMotor);
       
       climberSwitch= new DigitalInput(6);
       
       
    }
}
